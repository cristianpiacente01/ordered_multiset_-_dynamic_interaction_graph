[Test #0] Inizio unit test per il tipo CUSTOM ordered_multiset<int, int_ascending, int_equals>

[Test #1] Test 1: numero totale di elementi in ordine crescente

[Test #1] 	Metodi fondamentali
[Test #1] 	Inizio costruttore di default
[Test #1] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #1] 		Controllo che non sia contenuto nemmeno l'elemento {}... Risultato: true OK!
[Test #1] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #1] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #1] 	Fine costruttore di default

[Test #1] 	Inizio distruttore
[Test #1] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #1] 		Eseguo una delete... OK!
[Test #1] 	Fine distruttore

[Test #1] 	Inizio copy constructor
[Test #1] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}... OK!
[Test #1] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #1] 		Stampo il nuovo contenuto del multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #1] 		Stampo il multiset appena creato... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #1] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #1] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 	Fine copy constructor

[Test #1] 	Inizio operatore di assegnamento
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Rimuovo l'unica occorrenza dell'elemento {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>} dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Stampo il secondo multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Rimuovo un'occorrenza dell'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>} dal primo multiset per poi verificare l'indipendenza... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 2>} OK!
[Test #1] 		Stampo il secondo multiset... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>} OK!
[Test #1] 	Fine operatore di assegnamento
[Test #1] 	Fine metodi fondamentali

[Test #1] 	Inizio test interfaccia pubblica
[Test #1] 	Inizio costruttore che prende una coppia di iteratori
[Test #1] 		Gli elementi che saranno aggiunti sono {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>} {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>} {<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>} {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>} 
[Test #1] 		Creazione multiset usando due iteratori... Risultato: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 2>} OK!
[Test #1] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #1] 	Fine costruttore che prende una coppia di iteratori

[Test #1] 	Inizio metodo clear
[Test #1] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #1] 		Prima della clear: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 2>}
[Test #1] 		Dopo la clear: {} OK!
[Test #1] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #1] 		Prima della clear: {}
[Test #1] 		Dopo la clear: {} OK!
[Test #1] 	Fine metodo clear

[Test #1] 	Inizio metodo swap
[Test #1] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #1] 		Primo multiset: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 2>}
[Test #1] 		Secondo multiset: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>}
[Test #1] 		Chiamo la swap... OK!
[Test #1] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #1] 		Stampo i due multiset dopo la swap qui sotto:
[Test #1] 		Primo multiset: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>}
[Test #1] 		Secondo multiset: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 2>}
[Test #1] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #1] 		Stampo qui sotto i due multiset:
[Test #1] 		Multiset che era vuoto: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>}
[Test #1] 		Multiset che era riempito: {}
[Test #1] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #1] 		Multiset di nuovo vuoto: {}
[Test #1] 		Multiset di nuovo riempito: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>}
[Test #1] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #1] 	Fine metodo swap

[Test #1] 	Inizio metodo size
[Test #1] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #1] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #1] 		Multiset: {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 2>, <{<-25, 1>, <-3, 3>, <2, 1>, <4, 1>, <10, 1>, <23, 1>, <29, 1>, <38, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 3>}
[Test #1] 		Mi aspetto 6... Risultato: 6 OK!
[Test #1] 		Aggiungo l'elemento {} e verifico che la size venga incrementata, mi aspetto 7... Risultato: 7 OK!
[Test #1] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 6... Risultato: 6 OK!
[Test #1] 	Fine metodo size

[Test #1] 	Inizio metodo add
[Test #1] 		Utilizzo un multiset vuoto: {}
[Test #1] 		Aggiungo 6 volte l'elemento {}... OK!
[Test #1] 		Verifico la correttezza del contenuto, mi aspetto {<{}, 6>}... Risultato: {<{}, 6>} OK!
[Test #1] 		Aggiungo altri elementi:
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}... OK!
[Test #1] 			Aggiungo l'elemento {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}... OK!
[Test #1] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #1] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #1] 		{<{}, 6>, <{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>} OK!
[Test #1] 	Fine metodo add

[Test #1] 	Inizio metodo remove
[Test #1] 		Utilizzo lo stesso multiset di prima, rimuovo 5 occorrenze di {}... OK!
[Test #1] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #1] 		{<{}, 1>, <{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>} OK!
[Test #1] 		Verifico che ci sia una sola occorrenza di {}... Risultato: true OK!
[Test #1] 		Elimino l'ultima occorrenza di {}... OK!
[Test #1] 		Stampo il nuovo contenuto qui sotto:
[Test #1] 		{<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>} OK!
[Test #1] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento {} non presente:
[Test #1] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #1] 	Fine metodo remove

[Test #1] 	Inizio metodo multiplicity
[Test #1] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #1] 			Molteplicita' dell'elemento {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>} aspettata 1, ho 1 OK!
[Test #1] 			Molteplicita' dell'elemento {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>} aspettata 1, ho 1 OK!
[Test #1] 			Molteplicita' dell'elemento {<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>} aspettata 1, ho 1 OK!
[Test #1] 		Molteplicita' dell'elemento {} non presente... Risultato: 0 OK!
[Test #1] 	Fine metodo multiplicity

[Test #1] 	Inizio operator==
[Test #1] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #1] 			Stampo il multiset che vado ad utilizzare:
[Test #1] 			{<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>} OK!
[Test #1] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #1] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #1] 		{<{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>}
[Test #1] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #1] 		Aggiungo l'elemento {} al nuovo multiset e verifico che siano diversi... OK!
[Test #1] 		Stampo il nuovo multiset qui sotto:
[Test #1] 		{<{<-20, 1>, <-5, 3>, <-4, 1>, <-2, 1>, <1, 1>, <3, 1>, <6, 1>, <8, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{}, 1>}
[Test #1] 		Svuoto quest'ultimo con la clear... OK!
[Test #1] 		Stampo il multiset... Risultato: {} OK!
[Test #1] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #1] 	Fine operator==

[Test #1] 	Inizio metodo contains
[Test #1] 		Creo un nuovo multiset con i seguenti valori: {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>} {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>} 
[Test #1] 		Stampo il nuovo contenuto qui sotto:
[Test #1] 		{<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-5, 2>, <-4, 1>, <3, 1>, <8, 1>}, 3>} OK!
[Test #1] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #1] 			Contains dell'elemento {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}... Risultato: true OK!
[Test #1] 			Contains dell'elemento {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>}... Risultato: true OK!
[Test #1] 			Contains dell'elemento {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}... Risultato: true OK!
[Test #1] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #1] 			Contains dell'elemento {}... Risultato: false OK!
[Test #1] 	Fine metodo contains

[Test #1] 	Inizio stampa con iteratori
[Test #1] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #1] 		{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>} {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>}  OK!
[Test #1] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #1] 		{<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-5, 2>, <-4, 1>, <3, 1>, <8, 1>} {<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>} {<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}  OK!
[Test #1] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #1] 		Stampo con gli iteratori un multiset vuoto:
[Test #1] 		 OK!
[Test #1] 	Fine stampa con iteratori

[Test #1] 	Fine interfaccia pubblica

[Test #1] 	Inizio const correctness
[Test #1] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #1] 		Ctor di default... OK!
[Test #1] 		Costruttore che prende una coppia di iteratori... OK!
[Test #1] 		Distruttore... OK!
[Test #1] 		Copy constructor... OK!
[Test #1] 		Size... OK!
[Test #1] 		Multiplicity... OK!
[Test #1] 		Operatore di uguaglianza operator==... OK!
[Test #1] 		Contains... OK!
[Test #1] 		Begin... OK!
[Test #1] 		End... OK!
[Test #1] 		Operatore di stream operator<<... {<{<-25, 1>, <-3, 1>, <2, 1>, <29, 1>}, 1>, <{<-20, 1>, <-5, 1>, <-2, 1>, <1, 1>, <6, 1>}, 1>, <{<-5, 2>, <-4, 1>, <3, 1>, <8, 1>}, 3>} OK!
[Test #1] 	Fine metodi utilizzabili per multiset costanti

[Test #1] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #1] 	operator=, clear, swap, add, remove.
[Test #1] 	Fine const correctness

[Test #1] Fine test 1

[Test #2] Test 2: numero totale di elementi in ordine decrescente

[Test #2] 	Metodi fondamentali
[Test #2] 	Inizio costruttore di default
[Test #2] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #2] 		Controllo che non sia contenuto nemmeno l'elemento {}... Risultato: true OK!
[Test #2] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #2] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #2] 	Fine costruttore di default

[Test #2] 	Inizio distruttore
[Test #2] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #2] 		Eseguo una delete... OK!
[Test #2] 	Fine distruttore

[Test #2] 	Inizio copy constructor
[Test #2] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #2] 			Aggiungo l'elemento {<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-5, 1>, <2, 2>, <29, 1>, <49, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-24, 1>, <8, 3>, <9, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-24, 1>, <8, 3>, <9, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {}... OK!
[Test #2] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #2] 		Stampo il nuovo contenuto del multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #2] 		Stampo il multiset appena creato... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #2] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #2] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 	Fine copy constructor

[Test #2] 	Inizio operatore di assegnamento
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Rimuovo l'unica occorrenza dell'elemento {} dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Stampo il secondo multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>} OK!
[Test #2] 		Rimuovo un'occorrenza dell'elemento {<-24, 1>, <8, 3>, <9, 1>} dal primo multiset per poi verificare l'indipendenza... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Stampo il secondo multiset... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>} OK!
[Test #2] 	Fine operatore di assegnamento
[Test #2] 	Fine metodi fondamentali

[Test #2] 	Inizio test interfaccia pubblica
[Test #2] 	Inizio costruttore che prende una coppia di iteratori
[Test #2] 		Gli elementi che saranno aggiunti sono {<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>} {<-24, 1>, <8, 3>, <9, 1>} 
[Test #2] 		Creazione multiset usando due iteratori... Risultato: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>} OK!
[Test #2] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #2] 	Fine costruttore che prende una coppia di iteratori

[Test #2] 	Inizio metodo clear
[Test #2] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #2] 		Prima della clear: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>}
[Test #2] 		Dopo la clear: {} OK!
[Test #2] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #2] 		Prima della clear: {}
[Test #2] 		Dopo la clear: {} OK!
[Test #2] 	Fine metodo clear

[Test #2] 	Inizio metodo swap
[Test #2] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #2] 		Primo multiset: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>}
[Test #2] 		Secondo multiset: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>}
[Test #2] 		Chiamo la swap... OK!
[Test #2] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #2] 		Stampo i due multiset dopo la swap qui sotto:
[Test #2] 		Primo multiset: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>}
[Test #2] 		Secondo multiset: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>}
[Test #2] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #2] 		Stampo qui sotto i due multiset:
[Test #2] 		Multiset che era vuoto: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>}
[Test #2] 		Multiset che era riempito: {}
[Test #2] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #2] 		Multiset di nuovo vuoto: {}
[Test #2] 		Multiset di nuovo riempito: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>}
[Test #2] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #2] 	Fine metodo swap

[Test #2] 	Inizio metodo size
[Test #2] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #2] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #2] 		Multiset: {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-52, 1>, <-5, 1>, <0, 1>, <2, 2>, <39, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>}
[Test #2] 		Mi aspetto 7... Risultato: 7 OK!
[Test #2] 		Aggiungo l'elemento {<-20, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 1>} e verifico che la size venga incrementata, mi aspetto 8... Risultato: 8 OK!
[Test #2] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 7... Risultato: 7 OK!
[Test #2] 	Fine metodo size

[Test #2] 	Inizio metodo add
[Test #2] 		Utilizzo un multiset vuoto: {}
[Test #2] 		Aggiungo 31 volte l'elemento {}... OK!
[Test #2] 		Verifico la correttezza del contenuto, mi aspetto {<{}, 31>}... Risultato: {<{}, 31>} OK!
[Test #2] 		Aggiungo altri elementi:
[Test #2] 			Aggiungo l'elemento {<-5, 1>, <2, 2>, <29, 1>, <49, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {<-24, 1>, <8, 3>, <9, 1>}... OK!
[Test #2] 			Aggiungo l'elemento {}... OK!
[Test #2] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #2] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #2] 		{<{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 32>} OK!
[Test #2] 	Fine metodo add

[Test #2] 	Inizio metodo remove
[Test #2] 		Utilizzo lo stesso multiset di prima, rimuovo 31 occorrenze di {}... OK!
[Test #2] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #2] 		{<{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{}, 1>} OK!
[Test #2] 		Verifico che ci sia una sola occorrenza di {}... Risultato: true OK!
[Test #2] 		Elimino l'ultima occorrenza di {}... OK!
[Test #2] 		Stampo il nuovo contenuto qui sotto:
[Test #2] 		{<{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>} OK!
[Test #2] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento {<-20, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 1>} non presente:
[Test #2] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #2] 	Fine metodo remove

[Test #2] 	Inizio metodo multiplicity
[Test #2] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #2] 			Molteplicita' dell'elemento {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} aspettata 1, ho 1 OK!
[Test #2] 			Molteplicita' dell'elemento {<-5, 1>, <2, 2>, <29, 1>, <49, 1>} aspettata 1, ho 1 OK!
[Test #2] 			Molteplicita' dell'elemento {<-24, 1>, <8, 3>, <9, 1>} aspettata 1, ho 1 OK!
[Test #2] 		Molteplicita' dell'elemento {} non presente... Risultato: 0 OK!
[Test #2] 	Fine metodo multiplicity

[Test #2] 	Inizio operator==
[Test #2] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #2] 			Stampo il multiset che vado ad utilizzare:
[Test #2] 			{<{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>} OK!
[Test #2] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #2] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #2] 		{<{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>}
[Test #2] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #2] 		Aggiungo l'elemento {} al nuovo multiset e verifico che siano diversi... OK!
[Test #2] 		Stampo il nuovo multiset qui sotto:
[Test #2] 		{<{}, 1>, <{<-5, 1>, <2, 2>, <29, 1>, <49, 1>}, 1>, <{<-24, 1>, <8, 3>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 1>}
[Test #2] 		Svuoto quest'ultimo con la clear... OK!
[Test #2] 		Stampo il multiset... Risultato: {} OK!
[Test #2] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #2] 	Fine operator==

[Test #2] 	Inizio metodo contains
[Test #2] 		Creo un nuovo multiset con i seguenti valori: {<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>} {<-24, 1>, <8, 3>, <9, 1>} {<-24, 1>, <8, 3>, <9, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} 
[Test #2] 		Stampo il nuovo contenuto qui sotto:
[Test #2] 		{<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>} OK!
[Test #2] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #2] 			Contains dell'elemento {<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}... Risultato: true OK!
[Test #2] 			Contains dell'elemento {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}... Risultato: true OK!
[Test #2] 			Contains dell'elemento {<-24, 1>, <8, 3>, <9, 1>}... Risultato: true OK!
[Test #2] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #2] 			Contains dell'elemento {<-20, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 1>}... Risultato: false OK!
[Test #2] 	Fine metodo contains

[Test #2] 	Inizio stampa con iteratori
[Test #2] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #2] 		{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-24, 1>, <8, 3>, <9, 1>} {<-24, 1>, <8, 3>, <9, 1>}  OK!
[Test #2] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #2] 		{<-24, 1>, <8, 3>, <9, 1>} {<-24, 1>, <8, 3>, <9, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>} {<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}  OK!
[Test #2] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #2] 		Stampo con gli iteratori un multiset vuoto:
[Test #2] 		 OK!
[Test #2] 	Fine stampa con iteratori

[Test #2] 	Fine interfaccia pubblica

[Test #2] 	Inizio const correctness
[Test #2] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #2] 		Ctor di default... OK!
[Test #2] 		Costruttore che prende una coppia di iteratori... OK!
[Test #2] 		Distruttore... OK!
[Test #2] 		Copy constructor... OK!
[Test #2] 		Size... OK!
[Test #2] 		Multiplicity... OK!
[Test #2] 		Operatore di uguaglianza operator==... OK!
[Test #2] 		Contains... OK!
[Test #2] 		Begin... OK!
[Test #2] 		End... OK!
[Test #2] 		Operatore di stream operator<<... {<{<-24, 1>, <-20, 1>, <-4, 1>, <1, 1>, <2, 1>, <4, 2>, <8, 4>, <9, 1>}, 1>, <{<-52, 1>, <-5, 2>, <0, 1>, <2, 4>, <29, 1>, <39, 1>, <49, 1>}, 2>, <{<-24, 1>, <8, 3>, <9, 1>}, 2>} OK!
[Test #2] 	Fine metodi utilizzabili per multiset costanti

[Test #2] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #2] 	operator=, clear, swap, add, remove.
[Test #2] 	Fine const correctness

[Test #2] Fine test 2

[Test #2] Fine unit test per il tipo CUSTOM ordered_multiset<int, int_ascending, int_equals>

