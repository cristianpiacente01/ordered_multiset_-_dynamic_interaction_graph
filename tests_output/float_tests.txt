[Test #0] Inizio unit test per il tipo float

[Test #1] Test 1: ordine crescente con uguaglianza "standard"

[Test #1] 	Metodi fondamentali
[Test #1] 	Inizio costruttore di default
[Test #1] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #1] 		Controllo che non sia contenuto nemmeno l'elemento 0... Risultato: true OK!
[Test #1] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #1] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #1] 	Fine costruttore di default

[Test #1] 	Inizio distruttore
[Test #1] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #1] 		Eseguo una delete... OK!
[Test #1] 	Fine distruttore

[Test #1] 	Inizio copy constructor
[Test #1] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #1] 			Aggiungo l'elemento 5.3... OK!
[Test #1] 			Aggiungo l'elemento 5.2... OK!
[Test #1] 			Aggiungo l'elemento 5... OK!
[Test #1] 			Aggiungo l'elemento -2... OK!
[Test #1] 			Aggiungo l'elemento -3... OK!
[Test #1] 			Aggiungo l'elemento -12... OK!
[Test #1] 			Aggiungo l'elemento -12... OK!
[Test #1] 			Aggiungo l'elemento 12... OK!
[Test #1] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #1] 		Stampo il nuovo contenuto del multiset... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #1] 		Stampo il multiset appena creato... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #1] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #1] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 	Fine copy constructor

[Test #1] 	Inizio operatore di assegnamento
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #1] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Rimuovo l'unica occorrenza dell'elemento 5.2 dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Stampo il secondo multiset... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Rimuovo un'occorrenza dell'elemento -12 dal primo multiset per poi verificare l'indipendenza... OK!
[Test #1] 		Stampo il primo multiset... Risultato: {<-12, 1>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 		Stampo il secondo multiset... Risultato: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>} OK!
[Test #1] 	Fine operatore di assegnamento
[Test #1] 	Fine metodi fondamentali

[Test #1] 	Inizio test interfaccia pubblica
[Test #1] 	Inizio costruttore che prende una coppia di iteratori
[Test #1] 		Gli elementi che saranno aggiunti sono 5.3 5 -3 -12 
[Test #1] 		Creazione multiset usando due iteratori... Risultato: {<-12, 1>, <-3, 1>, <5, 1>, <5.3, 1>} OK!
[Test #1] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #1] 	Fine costruttore che prende una coppia di iteratori

[Test #1] 	Inizio metodo clear
[Test #1] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #1] 		Prima della clear: {<-12, 1>, <-3, 1>, <5, 1>, <5.3, 1>}
[Test #1] 		Dopo la clear: {} OK!
[Test #1] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #1] 		Prima della clear: {}
[Test #1] 		Dopo la clear: {} OK!
[Test #1] 	Fine metodo clear

[Test #1] 	Inizio metodo swap
[Test #1] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #1] 		Primo multiset: {<-12, 1>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Secondo multiset: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Chiamo la swap... OK!
[Test #1] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #1] 		Stampo i due multiset dopo la swap qui sotto:
[Test #1] 		Primo multiset: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Secondo multiset: {<-12, 1>, <-3, 1>, <-2, 1>, <5, 1>, <5.2, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #1] 		Stampo qui sotto i due multiset:
[Test #1] 		Multiset che era vuoto: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Multiset che era riempito: {}
[Test #1] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #1] 		Multiset di nuovo vuoto: {}
[Test #1] 		Multiset di nuovo riempito: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #1] 	Fine metodo swap

[Test #1] 	Inizio metodo size
[Test #1] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #1] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #1] 		Multiset: {<-12, 2>, <-3, 1>, <-2, 1>, <5, 1>, <5.3, 1>, <12, 1>}
[Test #1] 		Mi aspetto 7... Risultato: 7 OK!
[Test #1] 		Aggiungo l'elemento 5.1 e verifico che la size venga incrementata, mi aspetto 8... Risultato: 8 OK!
[Test #1] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 7... Risultato: 7 OK!
[Test #1] 	Fine metodo size

[Test #1] 	Inizio metodo add
[Test #1] 		Utilizzo un multiset vuoto: {}
[Test #1] 		Aggiungo 5 volte l'elemento 0... OK!
[Test #1] 		Verifico la correttezza del contenuto, mi aspetto {<0, 5>}... Risultato: {<0, 5>} OK!
[Test #1] 		Aggiungo altri elementi:
[Test #1] 			Aggiungo l'elemento 5.2... OK!
[Test #1] 			Aggiungo l'elemento -2... OK!
[Test #1] 			Aggiungo l'elemento -12... OK!
[Test #1] 			Aggiungo l'elemento 12... OK!
[Test #1] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #1] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #1] 		{<-12, 1>, <-2, 1>, <0, 5>, <5.2, 1>, <12, 1>} OK!
[Test #1] 	Fine metodo add

[Test #1] 	Inizio metodo remove
[Test #1] 		Utilizzo lo stesso multiset di prima, rimuovo 4 occorrenze di 0... OK!
[Test #1] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #1] 		{<-12, 1>, <-2, 1>, <0, 1>, <5.2, 1>, <12, 1>} OK!
[Test #1] 		Verifico che ci sia una sola occorrenza di 0... Risultato: true OK!
[Test #1] 		Elimino l'ultima occorrenza di 0... OK!
[Test #1] 		Stampo il nuovo contenuto qui sotto:
[Test #1] 		{<-12, 1>, <-2, 1>, <5.2, 1>, <12, 1>} OK!
[Test #1] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento 5.1 non presente:
[Test #1] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #1] 	Fine metodo remove

[Test #1] 	Inizio metodo multiplicity
[Test #1] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #1] 			Molteplicita' dell'elemento -12 aspettata 1, ho 1 OK!
[Test #1] 			Molteplicita' dell'elemento -2 aspettata 1, ho 1 OK!
[Test #1] 			Molteplicita' dell'elemento 5.2 aspettata 1, ho 1 OK!
[Test #1] 			Molteplicita' dell'elemento 12 aspettata 1, ho 1 OK!
[Test #1] 		Molteplicita' dell'elemento 0 non presente... Risultato: 0 OK!
[Test #1] 	Fine metodo multiplicity

[Test #1] 	Inizio operator==
[Test #1] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #1] 			Stampo il multiset che vado ad utilizzare:
[Test #1] 			{<-12, 1>, <-2, 1>, <5.2, 1>, <12, 1>} OK!
[Test #1] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #1] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #1] 		{<12, 1>, <5.2, 1>, <-2, 1>, <-12, 1>}
[Test #1] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #1] 		Aggiungo l'elemento 0 al nuovo multiset e verifico che siano diversi... OK!
[Test #1] 		Stampo il nuovo multiset qui sotto:
[Test #1] 		{<12, 1>, <5.2, 1>, <0, 1>, <-2, 1>, <-12, 1>}
[Test #1] 		Svuoto quest'ultimo con la clear... OK!
[Test #1] 		Stampo il multiset... Risultato: {} OK!
[Test #1] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #1] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #1] 	Fine operator==

[Test #1] 	Inizio metodo contains
[Test #1] 		Creo un nuovo multiset con i seguenti valori: 6.7 3.14 -3.14 3.14 5.6 -4 
[Test #1] 		Stampo il nuovo contenuto qui sotto:
[Test #1] 		{<-4, 1>, <-3.14, 1>, <3.14, 2>, <5.6, 1>, <6.7, 1>} OK!
[Test #1] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #1] 			Contains dell'elemento -4... Risultato: true OK!
[Test #1] 			Contains dell'elemento -3.14... Risultato: true OK!
[Test #1] 			Contains dell'elemento 3.14... Risultato: true OK!
[Test #1] 			Contains dell'elemento 5.6... Risultato: true OK!
[Test #1] 			Contains dell'elemento 6.7... Risultato: true OK!
[Test #1] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #1] 			Contains dell'elemento 5.1... Risultato: false OK!
[Test #1] 	Fine metodo contains

[Test #1] 	Inizio stampa con iteratori
[Test #1] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #1] 		-4 -3.14 3.14 3.14 5.6 6.7  OK!
[Test #1] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #1] 		6.7 5.6 3.14 3.14 -3.14 -4  OK!
[Test #1] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #1] 		Stampo con gli iteratori un multiset vuoto:
[Test #1] 		 OK!
[Test #1] 	Fine stampa con iteratori

[Test #1] 	Fine interfaccia pubblica

[Test #1] 	Inizio const correctness
[Test #1] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #1] 		Ctor di default... OK!
[Test #1] 		Costruttore che prende una coppia di iteratori... OK!
[Test #1] 		Distruttore... OK!
[Test #1] 		Copy constructor... OK!
[Test #1] 		Size... OK!
[Test #1] 		Multiplicity... OK!
[Test #1] 		Operatore di uguaglianza operator==... OK!
[Test #1] 		Contains... OK!
[Test #1] 		Begin... OK!
[Test #1] 		End... OK!
[Test #1] 		Operatore di stream operator<<... {<-4, 1>, <-3.14, 1>, <3.14, 2>, <5.6, 1>, <6.7, 1>} OK!
[Test #1] 	Fine metodi utilizzabili per multiset costanti

[Test #1] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #1] 	operator=, clear, swap, add, remove.
[Test #1] 	Fine const correctness

[Test #1] Fine test 1

[Test #2] Test 2: ordine decrescente con uguaglianza "standard"

[Test #2] 	Metodi fondamentali
[Test #2] 	Inizio costruttore di default
[Test #2] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #2] 		Controllo che non sia contenuto nemmeno l'elemento 0... Risultato: true OK!
[Test #2] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #2] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #2] 	Fine costruttore di default

[Test #2] 	Inizio distruttore
[Test #2] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #2] 		Eseguo una delete... OK!
[Test #2] 	Fine distruttore

[Test #2] 	Inizio copy constructor
[Test #2] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #2] 			Aggiungo l'elemento -8... OK!
[Test #2] 			Aggiungo l'elemento -4.201... OK!
[Test #2] 			Aggiungo l'elemento -4.203... OK!
[Test #2] 			Aggiungo l'elemento -4.2... OK!
[Test #2] 			Aggiungo l'elemento 4.2... OK!
[Test #2] 			Aggiungo l'elemento 4.2... OK!
[Test #2] 			Aggiungo l'elemento 8... OK!
[Test #2] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #2] 		Stampo il nuovo contenuto del multiset... Risultato: {<8, 1>, <4.2, 2>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #2] 		Stampo il multiset appena creato... Risultato: {<8, 1>, <4.2, 2>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #2] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #2] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<8, 1>, <4.2, 2>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 	Fine copy constructor

[Test #2] 	Inizio operatore di assegnamento
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #2] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<8, 1>, <4.2, 2>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Rimuovo l'unica occorrenza dell'elemento -4.2 dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<8, 1>, <4.2, 2>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Stampo il secondo multiset... Risultato: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Rimuovo un'occorrenza dell'elemento 4.2 dal primo multiset per poi verificare l'indipendenza... OK!
[Test #2] 		Stampo il primo multiset... Risultato: {<8, 1>, <4.2, 1>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Stampo il secondo multiset... Risultato: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 	Fine operatore di assegnamento
[Test #2] 	Fine metodi fondamentali

[Test #2] 	Inizio test interfaccia pubblica
[Test #2] 	Inizio costruttore che prende una coppia di iteratori
[Test #2] 		Gli elementi che saranno aggiunti sono -8 -4.203 4.2 8 
[Test #2] 		Creazione multiset usando due iteratori... Risultato: {<8, 1>, <4.2, 1>, <-4.203, 1>, <-8, 1>} OK!
[Test #2] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #2] 	Fine costruttore che prende una coppia di iteratori

[Test #2] 	Inizio metodo clear
[Test #2] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #2] 		Prima della clear: {<8, 1>, <4.2, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Dopo la clear: {} OK!
[Test #2] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #2] 		Prima della clear: {}
[Test #2] 		Dopo la clear: {} OK!
[Test #2] 	Fine metodo clear

[Test #2] 	Inizio metodo swap
[Test #2] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #2] 		Primo multiset: {<8, 1>, <4.2, 1>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Secondo multiset: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Chiamo la swap... OK!
[Test #2] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #2] 		Stampo i due multiset dopo la swap qui sotto:
[Test #2] 		Primo multiset: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Secondo multiset: {<8, 1>, <4.2, 1>, <-4.2, 1>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #2] 		Stampo qui sotto i due multiset:
[Test #2] 		Multiset che era vuoto: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Multiset che era riempito: {}
[Test #2] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #2] 		Multiset di nuovo vuoto: {}
[Test #2] 		Multiset di nuovo riempito: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #2] 	Fine metodo swap

[Test #2] 	Inizio metodo size
[Test #2] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #2] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #2] 		Multiset: {<8, 1>, <4.2, 2>, <-4.201, 1>, <-4.203, 1>, <-8, 1>}
[Test #2] 		Mi aspetto 6... Risultato: 6 OK!
[Test #2] 		Aggiungo l'elemento -4.202 e verifico che la size venga incrementata, mi aspetto 7... Risultato: 7 OK!
[Test #2] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 6... Risultato: 6 OK!
[Test #2] 	Fine metodo size

[Test #2] 	Inizio metodo add
[Test #2] 		Utilizzo un multiset vuoto: {}
[Test #2] 		Aggiungo 7 volte l'elemento 0... OK!
[Test #2] 		Verifico la correttezza del contenuto, mi aspetto {<0, 7>}... Risultato: {<0, 7>} OK!
[Test #2] 		Aggiungo altri elementi:
[Test #2] 			Aggiungo l'elemento -4.201... OK!
[Test #2] 			Aggiungo l'elemento -4.2... OK!
[Test #2] 			Aggiungo l'elemento 4.2... OK!
[Test #2] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #2] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #2] 		{<4.2, 1>, <0, 7>, <-4.2, 1>, <-4.201, 1>} OK!
[Test #2] 	Fine metodo add

[Test #2] 	Inizio metodo remove
[Test #2] 		Utilizzo lo stesso multiset di prima, rimuovo 6 occorrenze di 0... OK!
[Test #2] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #2] 		{<4.2, 1>, <0, 1>, <-4.2, 1>, <-4.201, 1>} OK!
[Test #2] 		Verifico che ci sia una sola occorrenza di 0... Risultato: true OK!
[Test #2] 		Elimino l'ultima occorrenza di 0... OK!
[Test #2] 		Stampo il nuovo contenuto qui sotto:
[Test #2] 		{<4.2, 1>, <-4.2, 1>, <-4.201, 1>} OK!
[Test #2] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento -4.202 non presente:
[Test #2] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #2] 	Fine metodo remove

[Test #2] 	Inizio metodo multiplicity
[Test #2] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #2] 			Molteplicita' dell'elemento 4.2 aspettata 1, ho 1 OK!
[Test #2] 			Molteplicita' dell'elemento -4.2 aspettata 1, ho 1 OK!
[Test #2] 			Molteplicita' dell'elemento -4.201 aspettata 1, ho 1 OK!
[Test #2] 		Molteplicita' dell'elemento 0 non presente... Risultato: 0 OK!
[Test #2] 	Fine metodo multiplicity

[Test #2] 	Inizio operator==
[Test #2] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #2] 			Stampo il multiset che vado ad utilizzare:
[Test #2] 			{<4.2, 1>, <-4.2, 1>, <-4.201, 1>} OK!
[Test #2] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #2] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #2] 		{<-4.201, 1>, <-4.2, 1>, <4.2, 1>}
[Test #2] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #2] 		Aggiungo l'elemento 0 al nuovo multiset e verifico che siano diversi... OK!
[Test #2] 		Stampo il nuovo multiset qui sotto:
[Test #2] 		{<-4.201, 1>, <-4.2, 1>, <0, 1>, <4.2, 1>}
[Test #2] 		Svuoto quest'ultimo con la clear... OK!
[Test #2] 		Stampo il multiset... Risultato: {} OK!
[Test #2] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #2] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #2] 	Fine operator==

[Test #2] 	Inizio metodo contains
[Test #2] 		Creo un nuovo multiset con i seguenti valori: -6 -2 4 7 6.9 11.1 
[Test #2] 		Stampo il nuovo contenuto qui sotto:
[Test #2] 		{<11.1, 1>, <7, 1>, <6.9, 1>, <4, 1>, <-2, 1>, <-6, 1>} OK!
[Test #2] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #2] 			Contains dell'elemento 11.1... Risultato: true OK!
[Test #2] 			Contains dell'elemento 7... Risultato: true OK!
[Test #2] 			Contains dell'elemento 6.9... Risultato: true OK!
[Test #2] 			Contains dell'elemento 4... Risultato: true OK!
[Test #2] 			Contains dell'elemento -2... Risultato: true OK!
[Test #2] 			Contains dell'elemento -6... Risultato: true OK!
[Test #2] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #2] 			Contains dell'elemento -4.202... Risultato: false OK!
[Test #2] 	Fine metodo contains

[Test #2] 	Inizio stampa con iteratori
[Test #2] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #2] 		11.1 7 6.9 4 -2 -6  OK!
[Test #2] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #2] 		-6 -2 4 6.9 7 11.1  OK!
[Test #2] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #2] 		Stampo con gli iteratori un multiset vuoto:
[Test #2] 		 OK!
[Test #2] 	Fine stampa con iteratori

[Test #2] 	Fine interfaccia pubblica

[Test #2] 	Inizio const correctness
[Test #2] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #2] 		Ctor di default... OK!
[Test #2] 		Costruttore che prende una coppia di iteratori... OK!
[Test #2] 		Distruttore... OK!
[Test #2] 		Copy constructor... OK!
[Test #2] 		Size... OK!
[Test #2] 		Multiplicity... OK!
[Test #2] 		Operatore di uguaglianza operator==... OK!
[Test #2] 		Contains... OK!
[Test #2] 		Begin... OK!
[Test #2] 		End... OK!
[Test #2] 		Operatore di stream operator<<... {<11.1, 1>, <7, 1>, <6.9, 1>, <4, 1>, <-2, 1>, <-6, 1>} OK!
[Test #2] 	Fine metodi utilizzabili per multiset costanti

[Test #2] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #2] 	operator=, clear, swap, add, remove.
[Test #2] 	Fine const correctness

[Test #2] Fine test 2

[Test #3] Test 3: ordine crescente per valore assoluto

[Test #3] 	Metodi fondamentali
[Test #3] 	Inizio costruttore di default
[Test #3] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #3] 		Controllo che non sia contenuto nemmeno l'elemento 0... Risultato: true OK!
[Test #3] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #3] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #3] 	Fine costruttore di default

[Test #3] 	Inizio distruttore
[Test #3] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #3] 		Eseguo una delete... OK!
[Test #3] 	Fine distruttore

[Test #3] 	Inizio copy constructor
[Test #3] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #3] 			Aggiungo l'elemento 5.4... OK!
[Test #3] 			Aggiungo l'elemento 9.4... OK!
[Test #3] 			Aggiungo l'elemento -9.4... OK!
[Test #3] 			Aggiungo l'elemento -9.40001... OK!
[Test #3] 			Aggiungo l'elemento 9.40001... OK!
[Test #3] 			Aggiungo l'elemento 5.41... OK!
[Test #3] 			Aggiungo l'elemento 5.43... OK!
[Test #3] 			Aggiungo l'elemento -4... OK!
[Test #3] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #3] 		Stampo il nuovo contenuto del multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #3] 		Stampo il multiset appena creato... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #3] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #3] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 	Fine copy constructor

[Test #3] 	Inizio operatore di assegnamento
[Test #3] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #3] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #3] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #3] 		Stampo il primo multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 		Rimuovo l'unica occorrenza dell'elemento -5.43 dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #3] 		Stampo il primo multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 		Stampo il secondo multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 		Rimuovo un'occorrenza dell'elemento 9.4 dal primo multiset per poi verificare l'indipendenza... OK!
[Test #3] 		Stampo il primo multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 1>, <-9.40001, 2>} OK!
[Test #3] 		Stampo il secondo multiset... Risultato: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>} OK!
[Test #3] 	Fine operatore di assegnamento
[Test #3] 	Fine metodi fondamentali

[Test #3] 	Inizio test interfaccia pubblica
[Test #3] 	Inizio costruttore che prende una coppia di iteratori
[Test #3] 		Gli elementi che saranno aggiunti sono 5.4 -9.4 9.40001 5.43 
[Test #3] 		Creazione multiset usando due iteratori... Risultato: {<5.4, 1>, <5.43, 1>, <-9.4, 1>, <9.40001, 1>} OK!
[Test #3] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #3] 	Fine costruttore che prende una coppia di iteratori

[Test #3] 	Inizio metodo clear
[Test #3] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #3] 		Prima della clear: {<5.4, 1>, <5.43, 1>, <-9.4, 1>, <9.40001, 1>}
[Test #3] 		Dopo la clear: {} OK!
[Test #3] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #3] 		Prima della clear: {}
[Test #3] 		Dopo la clear: {} OK!
[Test #3] 	Fine metodo clear

[Test #3] 	Inizio metodo swap
[Test #3] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #3] 		Primo multiset: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 1>, <-9.40001, 2>}
[Test #3] 		Secondo multiset: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>}
[Test #3] 		Chiamo la swap... OK!
[Test #3] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #3] 		Stampo i due multiset dopo la swap qui sotto:
[Test #3] 		Primo multiset: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>}
[Test #3] 		Secondo multiset: {<-4, 1>, <5.4, 1>, <5.41, 1>, <5.43, 1>, <9.4, 1>, <-9.40001, 2>}
[Test #3] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #3] 		Stampo qui sotto i due multiset:
[Test #3] 		Multiset che era vuoto: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>}
[Test #3] 		Multiset che era riempito: {}
[Test #3] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #3] 		Multiset di nuovo vuoto: {}
[Test #3] 		Multiset di nuovo riempito: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>}
[Test #3] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #3] 	Fine metodo swap

[Test #3] 	Inizio metodo size
[Test #3] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #3] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #3] 		Multiset: {<-4, 1>, <5.4, 1>, <5.41, 1>, <9.4, 2>, <-9.40001, 2>}
[Test #3] 		Mi aspetto 7... Risultato: 7 OK!
[Test #3] 		Aggiungo l'elemento 9.4001 e verifico che la size venga incrementata, mi aspetto 8... Risultato: 8 OK!
[Test #3] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 7... Risultato: 7 OK!
[Test #3] 	Fine metodo size

[Test #3] 	Inizio metodo add
[Test #3] 		Utilizzo un multiset vuoto: {}
[Test #3] 		Aggiungo 6 volte l'elemento 0... OK!
[Test #3] 		Verifico la correttezza del contenuto, mi aspetto {<0, 6>}... Risultato: {<0, 6>} OK!
[Test #3] 		Aggiungo altri elementi:
[Test #3] 			Aggiungo l'elemento 9.4... OK!
[Test #3] 			Aggiungo l'elemento -9.40001... OK!
[Test #3] 			Aggiungo l'elemento 5.41... OK!
[Test #3] 			Aggiungo l'elemento -4... OK!
[Test #3] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #3] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #3] 		{<0, 6>, <-4, 1>, <5.41, 1>, <9.4, 1>, <-9.40001, 1>} OK!
[Test #3] 	Fine metodo add

[Test #3] 	Inizio metodo remove
[Test #3] 		Utilizzo lo stesso multiset di prima, rimuovo 5 occorrenze di 0... OK!
[Test #3] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #3] 		{<0, 1>, <-4, 1>, <5.41, 1>, <9.4, 1>, <-9.40001, 1>} OK!
[Test #3] 		Verifico che ci sia una sola occorrenza di 0... Risultato: true OK!
[Test #3] 		Elimino l'ultima occorrenza di 0... OK!
[Test #3] 		Stampo il nuovo contenuto qui sotto:
[Test #3] 		{<-4, 1>, <5.41, 1>, <9.4, 1>, <-9.40001, 1>} OK!
[Test #3] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento 9.4001 non presente:
[Test #3] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #3] 	Fine metodo remove

[Test #3] 	Inizio metodo multiplicity
[Test #3] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #3] 			Molteplicita' dell'elemento -4 aspettata 1, ho 1 OK!
[Test #3] 			Molteplicita' dell'elemento 5.41 aspettata 1, ho 1 OK!
[Test #3] 			Molteplicita' dell'elemento 9.4 aspettata 1, ho 1 OK!
[Test #3] 			Molteplicita' dell'elemento -9.40001 aspettata 1, ho 1 OK!
[Test #3] 		Molteplicita' dell'elemento 0 non presente... Risultato: 0 OK!
[Test #3] 	Fine metodo multiplicity

[Test #3] 	Inizio operator==
[Test #3] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #3] 			Stampo il multiset che vado ad utilizzare:
[Test #3] 			{<-4, 1>, <5.41, 1>, <9.4, 1>, <-9.40001, 1>} OK!
[Test #3] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #3] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #3] 		{<-9.40001, 1>, <9.4, 1>, <5.41, 1>, <-4, 1>}
[Test #3] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #3] 		Aggiungo l'elemento 0 al nuovo multiset e verifico che siano diversi... OK!
[Test #3] 		Stampo il nuovo multiset qui sotto:
[Test #3] 		{<-9.40001, 1>, <9.4, 1>, <5.41, 1>, <-4, 1>, <0, 1>}
[Test #3] 		Svuoto quest'ultimo con la clear... OK!
[Test #3] 		Stampo il multiset... Risultato: {} OK!
[Test #3] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #3] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #3] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #3] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #3] 	Fine operator==

[Test #3] 	Inizio metodo contains
[Test #3] 		Creo un nuovo multiset con i seguenti valori: 2.71 -3.46 3.46 -20 24.3 -25 
[Test #3] 		Stampo il nuovo contenuto qui sotto:
[Test #3] 		{<2.71, 1>, <-3.46, 2>, <-20, 1>, <24.3, 1>, <-25, 1>} OK!
[Test #3] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #3] 			Contains dell'elemento 2.71... Risultato: true OK!
[Test #3] 			Contains dell'elemento -3.46... Risultato: true OK!
[Test #3] 			Contains dell'elemento -20... Risultato: true OK!
[Test #3] 			Contains dell'elemento 24.3... Risultato: true OK!
[Test #3] 			Contains dell'elemento -25... Risultato: true OK!
[Test #3] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #3] 			Contains dell'elemento 9.4001... Risultato: false OK!
[Test #3] 	Fine metodo contains

[Test #3] 	Inizio stampa con iteratori
[Test #3] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #3] 		2.71 -3.46 -3.46 -20 24.3 -25  OK!
[Test #3] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #3] 		-25 24.3 -20 -3.46 -3.46 2.71  OK!
[Test #3] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #3] 		Stampo con gli iteratori un multiset vuoto:
[Test #3] 		 OK!
[Test #3] 	Fine stampa con iteratori

[Test #3] 	Fine interfaccia pubblica

[Test #3] 	Inizio const correctness
[Test #3] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #3] 		Ctor di default... OK!
[Test #3] 		Costruttore che prende una coppia di iteratori... OK!
[Test #3] 		Distruttore... OK!
[Test #3] 		Copy constructor... OK!
[Test #3] 		Size... OK!
[Test #3] 		Multiplicity... OK!
[Test #3] 		Operatore di uguaglianza operator==... OK!
[Test #3] 		Contains... OK!
[Test #3] 		Begin... OK!
[Test #3] 		End... OK!
[Test #3] 		Operatore di stream operator<<... {<2.71, 1>, <-3.46, 2>, <-20, 1>, <24.3, 1>, <-25, 1>} OK!
[Test #3] 	Fine metodi utilizzabili per multiset costanti

[Test #3] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #3] 	operator=, clear, swap, add, remove.
[Test #3] 	Fine const correctness

[Test #3] Fine test 3

[Test #4] Test 4: ordine decrescente per valore assoluto

[Test #4] 	Metodi fondamentali
[Test #4] 	Inizio costruttore di default
[Test #4] 		Controllo della size uguale a 0... Risultato: 0 OK!
[Test #4] 		Controllo che non sia contenuto nemmeno l'elemento 0... Risultato: true OK!
[Test #4] 		Controllo l'operator== con un altro multiset vuoto dello stesso tipo... Risultato: true OK!
[Test #4] 		Stampo il contenuto vuoto... Risultato: {} OK!
[Test #4] 	Fine costruttore di default

[Test #4] 	Inizio distruttore
[Test #4] 		Creazione oggetto allocato sullo heap e puntatore... OK!
[Test #4] 		Eseguo una delete... OK!
[Test #4] 	Fine distruttore

[Test #4] 	Inizio copy constructor
[Test #4] 		Inizialmente aggiungo qualche elemento al primo multiset creato col ctor di default:
[Test #4] 			Aggiungo l'elemento 2.4... OK!
[Test #4] 			Aggiungo l'elemento 8... OK!
[Test #4] 			Aggiungo l'elemento -8... OK!
[Test #4] 			Aggiungo l'elemento 25... OK!
[Test #4] 			Aggiungo l'elemento -49... OK!
[Test #4] 			Aggiungo l'elemento 25.1... OK!
[Test #4] 			Aggiungo l'elemento -25... OK!
[Test #4] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #4] 		Stampo il nuovo contenuto del multiset... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 		Ora creo una copia indipendente dei dati utilizzando il cctor... OK!
[Test #4] 		Stampo il multiset appena creato... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 		Controllo con l'operator== i due multiset... Risultato: true OK!
[Test #4] 		Chiamo la clear sul primo multiset e poi lo stampo... Risultato: {} OK!
[Test #4] 		Stampo il secondo multiset verificando l'indipendenza dei dati... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 	Fine copy constructor

[Test #4] 	Inizio operatore di assegnamento
[Test #4] 		Utilizzo l'operator= per assegnare al primo multiset un multiset vuoto creato al volo... OK!
[Test #4] 		Utilizzo l'operator= per assegnare al primo multiset i dati del secondo... OK!
[Test #4] 		Utilizzo l'operator= per assegnare al primo multiset se' stesso (auto-assegnamento)... OK!
[Test #4] 		Stampo il primo multiset... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 		Rimuovo l'unica occorrenza dell'elemento 2.4 dal secondo multiset per poi verificare l'indipendenza... OK!
[Test #4] 		Stampo il primo multiset... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 		Stampo il secondo multiset... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>} OK!
[Test #4] 		Rimuovo un'occorrenza dell'elemento -25.1 dal primo multiset per poi verificare l'indipendenza... OK!
[Test #4] 		Stampo il primo multiset... Risultato: {<-49, 1>, <25, 2>, <8, 2>, <2.4, 1>} OK!
[Test #4] 		Stampo il secondo multiset... Risultato: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>} OK!
[Test #4] 	Fine operatore di assegnamento
[Test #4] 	Fine metodi fondamentali

[Test #4] 	Inizio test interfaccia pubblica
[Test #4] 	Inizio costruttore che prende una coppia di iteratori
[Test #4] 		Gli elementi che saranno aggiunti sono 2.4 -8 -49 -25 
[Test #4] 		Creazione multiset usando due iteratori... Risultato: {<-49, 1>, <-25, 1>, <-8, 1>, <2.4, 1>} OK!
[Test #4] 		Creazione multiset usando due iteratori uguali, quindi che risultera' vuoto... Risultato: {} OK!
[Test #4] 	Fine costruttore che prende una coppia di iteratori

[Test #4] 	Inizio metodo clear
[Test #4] 		Utilizzo la clear su un multiset non vuoto, ossia quello costruito con due iteratori
[Test #4] 		Prima della clear: {<-49, 1>, <-25, 1>, <-8, 1>, <2.4, 1>}
[Test #4] 		Dopo la clear: {} OK!
[Test #4] 		Utilizzo la clear su un multiset vuoto, ossia quello costruito con due iteratori uguali
[Test #4] 		Prima della clear: {}
[Test #4] 		Dopo la clear: {} OK!
[Test #4] 	Fine metodo clear

[Test #4] 	Inizio metodo swap
[Test #4] 		Riutilizzo due multiset creati in precedenza qui sotto stampati:
[Test #4] 		Primo multiset: {<-49, 1>, <25, 2>, <8, 2>, <2.4, 1>}
[Test #4] 		Secondo multiset: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>}
[Test #4] 		Chiamo la swap... OK!
[Test #4] 		Controllo che i due contenuti siano stati scambiati... OK!
[Test #4] 		Stampo i due multiset dopo la swap qui sotto:
[Test #4] 		Primo multiset: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>}
[Test #4] 		Secondo multiset: {<-49, 1>, <25, 2>, <8, 2>, <2.4, 1>}
[Test #4] 		Ora scambio il primo multiset con un multiset vuoto creato in precedenza... OK!
[Test #4] 		Stampo qui sotto i due multiset:
[Test #4] 		Multiset che era vuoto: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>}
[Test #4] 		Multiset che era riempito: {}
[Test #4] 		Li riporto allo stato originale con un'altra swap... OK!
[Test #4] 		Multiset di nuovo vuoto: {}
[Test #4] 		Multiset di nuovo riempito: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>}
[Test #4] 		Infine scambio due multiset vuoti tra di loro e li stampo... {} {} OK!
[Test #4] 	Fine metodo swap

[Test #4] 	Inizio metodo size
[Test #4] 		Chiamo la size su un multiset vuoto, mi aspetto 0... Risultato: 0 OK!
[Test #4] 		Chiamo la size sul multiset utilizzato in precedenza che stampo qui sotto:
[Test #4] 		Multiset: {<-49, 1>, <25.1, 1>, <25, 2>, <8, 2>}
[Test #4] 		Mi aspetto 6... Risultato: 6 OK!
[Test #4] 		Aggiungo l'elemento 39.07 e verifico che la size venga incrementata, mi aspetto 7... Risultato: 7 OK!
[Test #4] 		Rimuovo l'elemento appena aggiunto e verifico che la size venga decrementata, mi aspetto 6... Risultato: 6 OK!
[Test #4] 	Fine metodo size

[Test #4] 	Inizio metodo add
[Test #4] 		Utilizzo un multiset vuoto: {}
[Test #4] 		Aggiungo 9 volte l'elemento 0... OK!
[Test #4] 		Verifico la correttezza del contenuto, mi aspetto {<0, 9>}... Risultato: {<0, 9>} OK!
[Test #4] 		Aggiungo altri elementi:
[Test #4] 			Aggiungo l'elemento 8... OK!
[Test #4] 			Aggiungo l'elemento 25... OK!
[Test #4] 			Aggiungo l'elemento 25.1... OK!
[Test #4] 		Controllo che gli elementi siano stati inseriti nell'ordine corretto... Risultato: true OK!
[Test #4] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #4] 		{<25.1, 1>, <25, 1>, <8, 1>, <0, 9>} OK!
[Test #4] 	Fine metodo add

[Test #4] 	Inizio metodo remove
[Test #4] 		Utilizzo lo stesso multiset di prima, rimuovo 8 occorrenze di 0... OK!
[Test #4] 		Stampo il nuovo contenuto del multiset qui sotto:
[Test #4] 		{<25.1, 1>, <25, 1>, <8, 1>, <0, 1>} OK!
[Test #4] 		Verifico che ci sia una sola occorrenza di 0... Risultato: true OK!
[Test #4] 		Elimino l'ultima occorrenza di 0... OK!
[Test #4] 		Stampo il nuovo contenuto qui sotto:
[Test #4] 		{<25.1, 1>, <25, 1>, <8, 1>} OK!
[Test #4] 		(Mi aspetto l'eccezione custom) Provo ad eliminare l'elemento 39.07 non presente:
[Test #4] 		Eccezione custom catturata: Impossibile rimuovere un elemento non presente nel multiset ordinato.
[Test #4] 	Fine metodo remove

[Test #4] 	Inizio metodo multiplicity
[Test #4] 		Uso l'ultimo multiset utilizzato, controllo che per ogni elemento il metodo multiplicity restituisca il numero di occorrenze corretto:
[Test #4] 			Molteplicita' dell'elemento 25.1 aspettata 1, ho 1 OK!
[Test #4] 			Molteplicita' dell'elemento 25 aspettata 1, ho 1 OK!
[Test #4] 			Molteplicita' dell'elemento 8 aspettata 1, ho 1 OK!
[Test #4] 		Molteplicita' dell'elemento 0 non presente... Risultato: 0 OK!
[Test #4] 	Fine metodo multiplicity

[Test #4] 	Inizio operator==
[Test #4] 		A partire dall'ultimo multiset utilizzato creo un altro multiset ma con policy di ordinamento diversa:
[Test #4] 			Stampo il multiset che vado ad utilizzare:
[Test #4] 			{<25.1, 1>, <25, 1>, <8, 1>} OK!
[Test #4] 			Creo un nuovo multiset con ordinamento diverso, utilizzando il costruttore che prende due iteratori... OK!
[Test #4] 		Nuovo multiset con ordinamento diverso creato, lo stampo qui sotto:
[Test #4] 		{<8, 1>, <25, 1>, <25.1, 1>}
[Test #4] 		Utilizzo l'operator== tra i due multiset ordinati in modo diverso... Risultato: true OK!
[Test #4] 		Aggiungo l'elemento 0 al nuovo multiset e verifico che siano diversi... OK!
[Test #4] 		Stampo il nuovo multiset qui sotto:
[Test #4] 		{<0, 1>, <8, 1>, <25, 1>, <25.1, 1>}
[Test #4] 		Svuoto quest'ultimo con la clear... OK!
[Test #4] 		Stampo il multiset... Risultato: {} OK!
[Test #4] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento uguale... Risultato: true OK!
[Test #4] 		Verifico l'uguaglianza con un multiset vuoto di ordinamento diverso... Risultato: true OK!
[Test #4] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento uguale... Risultato: true OK!
[Test #4] 		Verifico l'uguaglianza tra due multiset vuoti di ordinamento diverso... Risultato: true OK!
[Test #4] 	Fine operator==

[Test #4] 	Inizio metodo contains
[Test #4] 		Creo un nuovo multiset con i seguenti valori: 38.4 29.5 29.6 29.7 -39 -39.1 39.05 39.06 
[Test #4] 		Stampo il nuovo contenuto qui sotto:
[Test #4] 		{<-39.1, 1>, <39.06, 1>, <39.05, 1>, <-39, 1>, <38.4, 1>, <29.7, 1>, <29.6, 1>, <29.5, 1>} OK!
[Test #4] 		Controllo che la contains dia true per ogni elemento distinto del multiset:
[Test #4] 			Contains dell'elemento -39.1... Risultato: true OK!
[Test #4] 			Contains dell'elemento 39.06... Risultato: true OK!
[Test #4] 			Contains dell'elemento 39.05... Risultato: true OK!
[Test #4] 			Contains dell'elemento -39... Risultato: true OK!
[Test #4] 			Contains dell'elemento 38.4... Risultato: true OK!
[Test #4] 			Contains dell'elemento 29.7... Risultato: true OK!
[Test #4] 			Contains dell'elemento 29.6... Risultato: true OK!
[Test #4] 			Contains dell'elemento 29.5... Risultato: true OK!
[Test #4] 		Controllo che la contains dia false per un elemento non contenuto:
[Test #4] 			Contains dell'elemento 39.07... Risultato: false OK!
[Test #4] 	Fine metodo contains

[Test #4] 	Inizio stampa con iteratori
[Test #4] 		Uso l'ultimo multiset utilizzato, stampo gli elementi in ordine del multiset ordinato tramite gli iteratori:
[Test #4] 		-39.1 39.06 39.05 -39 38.4 29.7 29.6 29.5  OK!
[Test #4] 		Ora di nuovo ma stampo partendo dalla fine, per utilizzare il decremento nell'iteratore bidirectional:
[Test #4] 		29.5 29.6 29.7 38.4 -39 39.05 39.06 -39.1  OK!
[Test #4] 		Controllo che gli elementi restituiti dall'iteratore costituiscono una permutazione degli elementi inseriti in precedenza... Risultato: true OK!
[Test #4] 		Stampo con gli iteratori un multiset vuoto:
[Test #4] 		 OK!
[Test #4] 	Fine stampa con iteratori

[Test #4] 	Fine interfaccia pubblica

[Test #4] 	Inizio const correctness
[Test #4] 	Metodi utilizzabili (da parte dell'utente o meno, come il distruttore) su un ordered_multiset costante:
[Test #4] 		Ctor di default... OK!
[Test #4] 		Costruttore che prende una coppia di iteratori... OK!
[Test #4] 		Distruttore... OK!
[Test #4] 		Copy constructor... OK!
[Test #4] 		Size... OK!
[Test #4] 		Multiplicity... OK!
[Test #4] 		Operatore di uguaglianza operator==... OK!
[Test #4] 		Contains... OK!
[Test #4] 		Begin... OK!
[Test #4] 		End... OK!
[Test #4] 		Operatore di stream operator<<... {<-39.1, 1>, <39.06, 1>, <39.05, 1>, <-39, 1>, <38.4, 1>, <29.7, 1>, <29.6, 1>, <29.5, 1>} OK!
[Test #4] 	Fine metodi utilizzabili per multiset costanti

[Test #4] 	I metodi non utilizzabili dell'interfaccia pubblica per multiset costanti sono:
[Test #4] 	operator=, clear, swap, add, remove.
[Test #4] 	Fine const correctness

[Test #4] Fine test 4

[Test #4] Fine unit test per il tipo float

